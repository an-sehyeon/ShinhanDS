Day04(25.4.4)


1. 복습 겸 실습 
    - Converter.java (LAB2)
        - 문자열내의 특정 문자를 지정한 문자로 수정하는 프로그램
    
    - Spliting.java (LAB2)
        - 문자열과 구분자를 입력받아 문자열에 포함된 구분자를 기준으로
          문자열 배열로 만들어 반환하는 프로그램

    
    - LAB.java, Grade(Enum) (LAB3)
        - 사용자가 메뉴를 선택하여 학생 정보 입력, 성적 목록 출력,
        최고 점수 학생 찾기, 평균 점수 계산, 특정 점수 이상 학생 출력 하는 프로그램
        (배열, 반복문, 조건문, enum 활용)

        next(), nextInt() : 단어, 공백, enter로 구분
        nextLine을 사용하려면 중간에 한번 버려줘야됨

2. 클래스

    1) 객체 (Car, CarTest, Person, Calculator)
        - 객체는 속성과 동작으로 구성. 
        - 이러한 속성과 동작을 각각 필드와 메소드라고 부름

        - 매개값 : 객체가 전달하고자 하는 데이터, 메소드 이름과 함께 괄호()안에 기술
                  메소드(매개값1,매개값2...)
        - 리턴값 : 메소드의 실행의 결과, 호출한 곳으로 값을 돌려줌

        [객체 지향 프로그래밍 특징]
            1. 캡슐화 
                - 객체의 데이터(필드), 동작(메소드)을 하나로 묶고 실제 구현 내용을 외부에 감추는 것
                (private)

            2. 상속 : 부모 객체가 자기 필드와 메소드를 자식 객체에게 물려줘 자식 객체가 사용할 수 있게 함
                => 코드 재사용성을 높이고 유지 보수 시간 최소화

            3. 다형성 : 사용 방법은 동일하지만 실행 결과가 다양함

    2) 클래스와 인스턴스
        - 클래스로부터 생성된 객체를 해당 클래스의 인스턴스라고 부름
        - 클래스로부터 객체를 만드는 과정을 인스턴스화라고 함
        - 동일한 클래스로부터 여러 개의 인스턴스를 만들 수 있음

        - 클래스명은 첫 문자를 대문자로 하고 숫자를 포함해도 되지만 첫 문자는 X, 특수 문자 중 $, _를 포함가능


    3) 생성자 선언과 호출 (Book, BookTest), (Account, TestAccount)
        - 기본 생성자
        - 생성자 선언
        - 필드 초기화
        - 생성자 오버로딩 : 매개변수를 달리하는 생성자를 여러 개 선언하는 것
        
        - this 
            - 인스턴스화 되었을 때 자기자신의 메모리 주소를 담고있는 키워드
            - 자기 자신의 메모리를 가르킴
            - 생성자에서 다른 생성자를 호출할 경우 사용
            - 매개변수의 이름을 멤버 변수와 다른 이름으로 설정하면 this 불필요
            - 매개변수 이름과 대입하는 이름이 같은 경우 this를 사용하지 않으면 값이 제대로 입력되지않는 경우 발생
            
            - 하나의 생성자가 같은 이름의 다른 생성자를 호출 : this()
            - 매개변수가 작은곳에서 많은곳을 호출

        
