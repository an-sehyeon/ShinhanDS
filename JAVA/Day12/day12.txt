Day12(25.4.16)

(package : shinhan.day12)
1. 복습(Review.java)
    - Collection add() : List, Set : interface
		 					map
		- List : ArrayList. LinkedList, Vector : 순서있음, 중복가능
		- Set : HashSet(순서없음), TreeSet(순서있음) : 키 중복 불가
        - Map : 키와 값의 쌍, HashMap, Hashtable, TreeMap


2. 람다식(LambdaTest1.java, MyInterface.java, MyImpl.java)
    - 함수형 프로그래밍 
    - 함수를 정의하고 이 함수를 데이터 처리부로 보내 데이터를 처리하는 기법
    - 데이터 처리부는 제공된 함수의 입력값으로 데이터를 넣고 함수에 정의된 처리 내용을 실행
    - 람다식 : 데이터 처리부에 제공되는 함수 역할을 하는 매개변수를 가진 중괄호 블록

    람다식 : (매개변수, ...) -> {처리내용}

    [함수형 인터페이스] 
        - 인터페이스가 단 하나의 추상 메소드를 가지는 것
        - 인터페이스가 함수형 인터페이스임을 보장하기 위해서는 
          @FunctionalInterface 어노테이션으로 확인인

    ex)
    인터페이스                                   람다식
    public interface Runnable{                  ( )->{..}
        void run();
    }


    @FunctionalInterface
    public interface Calculable{                (x, y)->{...}
        void calculate(int x, int y);
    }

    - 매개변수가 없는 람다식(Button.java, ButtonExample.java, SaveListener.java)
        - 실행문이 두 개 이상일 경우 중괄호 생략 불가능
            () -> {실행문, 실행문}
        - 실행문이 하나일 경우 중괄호 생략 가능
            () -> 실행문

    - 매개변수가 있는 람다식
        - 매개변수를 선언할 때 타입은 생략할 수 있고, 구체적인 타입 대신에 var를 사용할 수 있음
        - 매개변수가 하나일 경우 괄호 생략 가능, 타입 또는 var 붙일 수 없음

    - 리턴값이 있는 람다식 (LambdaTest1.java)
        - return문 하나만 있을 경우 중괄호, 리턴 키워드 생략가능
        - 리턴값은 연산식 또는 메소드 호출로 대체 가능

    - 메소드 참조
        - 메소드를 참조해 매개변수의 정보 및 리턴 타입을 알아내 람다식에서 불필요한 매개변수를 제거
        (left, rigth) -> Math.max(left, rigth);
        - 정적 메소드와 인스턴스 메소드 참조 
            정적 메소드를 참조 시 클래스 이름 뒤에 :: 기호를 붙이고 정적 메소드 이름 기술)
                ( 클래스 :: 메소드 )
            인스턴스 메소드일 경우 먼저 객체를 생성한 다음 참조 변수 뒤에 :: 기호를 붙이고 메소드 이름 기술
                ( 참조변수 :: 메소드)


    - 생성자 참조 
        - 객체를 생성하는 것
        (a, b) -> {return new 클래스(a,b);} == 클래스 :: new
       
    

3. 17장 스트림(StreamTest.java, ShinhanStudent.java)
    - 컬렉션 및 배열의 요소를 반복처리하기 위해 스트림 사용
    - 요소들이 하나씩 흘러가면서 처리된다는 의미
        Stream<String> stream = list.stream();
        stream.forEach(item -> {});

    - 스트림과 iterator 차이점
        1) 내부 반복자이므로 처리속도가 빠르고 병렬 처리에 효율적
        2) 람다식으로 다양한 요소 처리 정의 가능
        3) 중간 처리와 최종 처리를 수행하도록 파이프 라인 형성 가능


    mapToInt() : 객체를 int 값으로 매핑 후 IntStream으로 변환
    - student -> student.getScore() : student 객체를 getScore()의 리턴값으로 매핑
    ex) double avg = list.stream()
                    .mapToInt(student->stdunt.getScore())
                    .average()
                    .getAsDoublie();

    
    - 리소스로부터 스트림 얻기 
        [컬렉션으로부터 스트림 얻기]
          - Collection 인터페이스는 스트림과 parallelStream() 메소드를 가지고 있기 때문에 
            자식 인터페이스인 list와 set 인터페이스를 구현한 모든 컬렉션에서 객체 스트림을 얻을 수 있다.
            Stream<객체> 변수 = list.stream().forEach(p->System.out.println(p));

        [배열로부터 스트림 얻기]
         - 문자열 배열
            