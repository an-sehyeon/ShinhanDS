Day11(25.4.15)


(package : shinhan.day11)
1. 복습(Review.java)
    - Multi Thread


2. 데몬 스레드(AutoSaveThread.java, ThreadTest.java)
    - 주 스레드의 작업을 돕는 보조적인 역할을 수행하는 스레드
    - 주 스레드가 종료되면 데몬 스레드도 따라서 자동 종료
    - 적용 예) 워드프로세서의 자동 저장, 미디어플레이어의 동영상 및 음악 재생, 가비지 컬렉터
    
    - 주 스레드가 데몬이 될 스레드의 setDeamon(true)를 호출
        thread.setDaemon(true);

    [스레드풀로 작업 처리 제한하기]
    - 작업 처리에 사용되는 스레드 개수를 제한하고 작업 큐에 들어오는 작업들을 스레드가 하나씩 맡아 처리하는 방식



3. 15장 컬렉션 자료구조
    [컬렉션 프레임워크]
    - List(CollectionTest.java, Board.java)
        - 순서를 유지하고 저장, 중복 저장 가능
        - ArrayList : 연속공간에 저장됨, 맨뒤에 추가는 빠르지만 삽입이 많은 경우 바람직하지 않다.(느림)
        - LinkedList : 객체 삭제와 삽입이 빈번한 곳에서 ArrayList보다 유리
        - Vector : 동기화된 메소드로 구성되어 있어 멀티 스레드가 동시에 Vector() 메소드를 실행할 수 없음
                   멀티 스레드 환경에서는 안전하게 객체를 추가 또는 삭제할 수 있음

    - Set : 순서를 유지하지 않고, 저장, 중복 저장 불가능
        - HashSet : 동등 객체를 중복 저장하지 않음
         
    - Map : 키와 값으로 구성된 엔트리 저장, 키는 중복 저장 안됨
            키는 중복 저장 불가능, 값은 중복 저장 가능, 기존에 저장된 키와 동일한 키로 값을 저장하면 새로운 값으로 대체
        - HashMap : 키로 사용할 hashCode() 메소드의 리턴값이 같고 equals() 메소드가 true를 리턴할 경우, 동일 키로 보고 중복 저장을 허용하지 않는다.
            (Map<K, V> map = new HashMap<>();)
        - Hashtable : 동기화된 메소드로 구성되어 있어 멀티 스레드가 동시에 Hashtable의 메소드들을 실행불가
                      멀티 스레드 환경에서도 안전하게 객체를 추가, 삭제 가능
            (Map<String, Integer> map = new Hashtable<>();)

        - Properties : 키와 값을 String 타입으로 제한한 컬렉션
                       Hashtable의 자식 클래스이기 때문에 Hashtable의 특징을 그대로 가지고 있다.

    - Sort(CollectionTest2.java, DescendingInteger.java, Board.java)
        - 람다표현식 :  Integer : Arrays.sort(arr, (a,b)->a-b);
                        String : Arrays.sort(arr,(o1, o2)-> o2.compareTo(o1));
                        - 나 먼저 작성하고 들어온 data(매개변수)작성하면 ASC
                        - 반대는 DESC

    
    - TreeSet (CollectionTest2.java, Student.java)
        - 이진 트리를 기반으로 한 Set 컬렉션
        - 여러 개의 노드가 트리 형태로 연결된 구조. 루트 노드에서 시작해 각 노드에 최대 2개의 노드를 연결할 수 있는 구조를 가짐
        ( TreeSet 컬렉션 생성 방법 : TreeSet<E> treeSet = new TreeSet<>(); )

    - TreeMap
        - 이진 트리를 기반으로 한 Map 컬렉션
        - TreeSet과의 차이점은 키와 값이 저장된 Entry를 저장한다.
        - TreeMap에 엔트리를 저장하면 키를 기준으로 자동 정렬
        - 부모 키 값과 비교해서 낮은 것은 왼쪽, 높은 것은 오른쪽 자식 노드에 Entry 객체를 저장
        ( TreeMap 컬렉션 생성 방법 : TreeMap<K, V> treemap = new TreeMap<>(); )


    - Comparable과 Comparator
        - 

    - Stack

    - Queue
