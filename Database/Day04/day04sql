-- DQL(Data Query Language) : SELECT
-- 작성순서, 해석순서
-- 단일행함수 : substr(), length(), nvl().., 다중행함수 max(), sum()...
-- JOIN (행을 연결) : inner join, outer join, self join, ANSI표준(using, on)
-- SubQuery(main Query에 속한 select문) : 일반 서브쿼리, 스칼라 서브쿼리, 인라인 서브쿼리, 상관 서브쿼리


-- 서브쿼리

-- JONES 직원보다 더 많은 급여를 받고 있는 직원은?
select *
from emp
where sal > (
    select sal
    from emp
    where ename = 'JONES');


-- SMITH 직원과 같은 부서의 직원들을 조회
select *
from emp
where deptno = (
    select deptno
    from emp
    where ename = 'SMITH')
and ename <> 'SMITH';


-- hr/hr
-- Alexander
-- subquery의 결과가 단일행인지, 다중행인지? 사용되는 연산자가 다르다
select *
from employees
where first_name =ANY (
    select first_name 
    from employees
    where first_name = 'Alexander');
    

-- 평균 급여보다 더 많은 급여를 받는 직원들
select *
from employees
where salary > (
    select avg(salary)
    from employees);

-- 최고 급여를 받는 직원의 이름과 입사일
select first_name, hire_date
from employees
where salary = (
    select max(salary)
    from employees);


-- 부서별 최고 급여보다 급여를 더 많이 받는 직원
-- 주의 : "single-row subquery returns more than one row"
-- >= ALL : 최대보다 크다는 의미
-- >= ANY : 최소보다 크다는 의미
-- IN : 조건에 포함, =ANY, =SOME와 같음
select *
from employees
where salary >= ALL (
    select max(salary)
    from employees
    group by department_id);
    
select *
from employees
where salary >= ANY (
    select max(salary)
    from employees
    group by department_id);


select *
from employees
where salary IN (
    select max(salary)
    from employees
    group by department_id);


-- 30번 부서의 급여보다 적은 급여를 받는 직원들(최소보다 작다)
-- < ANY : 최대보다 작다
-- < ALL : 최소보다 작다

select *
from employees
where salary < ALL(
    select salary
    from employees
    where department_id = 30);


-- EXISTS
-- 10번 부서의 직원이 존재하면 직원 조회
select *
from employees
where exists(
    select department_id
    from employees
    where department_id = 10);


-- 비교할 열이 여러 개인 다중열 서브쿼리
-- 다중열 서브쿼리
select *
from employees
where (department_id, salary) in (
    select department_id, max(salary)
    from employees
    group by department_id)
order by department_id asc;



-- 상관형 Sub Query
-- 본인이 받는 급여가 본인이 속한 부서의 평균 급여보다 적은 급여를 받는 직원의 이름, 부서번호, 급여를 조회
select first_name, department_id, salary
from employees 직원
where salary < ( 
    select avg(salary) 
    from employees 
    where department_id = 직원.department_id);


-- inline View (가상의 table)
select *
from employees,(
    select department_id, avg(salary) 평균
    from employees 
    group by department_id) 부서별평균
where employees.department_id = 부서별평균.department_id
and employees.salary <  부서별평균.평균;




-- 직원정보출력, 자신이 속한 부서의 평균도 출력
-- inline View
select employees.*, 부서별평균.평균
from employees,(
    select department_id, avg(salary) 평균
    from employees 
    group by department_id) 부서별평균
where employees.department_id = 부서별평균.department_id
and employees.salary <  부서별평균.평균;

-- 스칼러 서브쿼리 (select절에 select)
-- 외부의 칼럼의 서브쿼리에서 사용(상관형 서브쿼리)
select 직원.*, (select avg(salary) from employees where department_id = 직원.department_id) 평균 
from employees 직원;


-- 문제풀이
-- q1 
select job, empno, ename, sal, deptno, dname
from emp join dept using(deptno)
where job in(
    select job
    from emp
    where ename = 'ALLEN')
order by empno asc;


-- q2
select empno, ename, dname, hiredate, loc, sal, grade
from emp join dept using(deptno)
         join salgrade on( emp.sal between salgrade.losal and salgrade.hisal)
where sal > (        
    select avg(sal)
    from emp)
order by sal desc, empno asc;



-- q3
select empno, ename, job, deptno, dname, loc
from emp join dept using(deptno)
where deptno = 10
and job not in(
    select job
    from emp
    where deptno = 30);


-- q4
select empno, ename, sal, grade
from emp join salgrade on(emp.sal between salgrade.losal and salgrade.hisal)
where sal > all (
    select max(sal)        
    from emp
    where job = 'SALESMAN')
order by empno asc;

-------------------------------------------------------------------------

-- DML(Data Manipulation Language) 조작어 -> Insert, Update, Delete
-- DDL(Data Definition Language) 정의어 -> create table, drop table,...

-- table생성 후 employees테이블의 모든 값 insert
create table emp1
as select * from employees;
select * from emp1

-- 원하는 컬럼만 insert
create table emp2
as select employee_id, first_name, salary from employees;
select * from emp2 order by 1;
-- table 복사시 제약조건(PK,UNIQUE, CHECK...)은 복사되지않음
insert into emp2 (employee_id, first_name, salary) values(1,'스티븐',1000  );
-- 명시되지 않은 칼럼은 암묵적으로 null이다.
insert into emp2 (employee_id, first_name) values(2,'알렉스');
-- 명시적으로 null
insert into emp2 (employee_id, first_name, salary) values(3,'스티브',null  );
insert into emp2 values(4,'제임스',2000);
desc emp2

-- table의 구조만 복사하고 data는 insert는 하지않기
create table emp3
as select * from employees where 1=0;
select * from emp3;


create table student(
    stdid number,
    name1 char(10),     -- 고정문자
    name2 varchar2(10)  -- 가변문자
);

select * from student;
insert into student(stdid, name1, name2) values(1,'a','b');
insert into student(name1, name2, stdid) values('a ','b ',2);
insert into student values(3,'a     ','b       ');
insert into student values(4,'   a   ','b       ');

-- char 연습
select *
from student
where name1 = 'a';

-- varchar2 연습
select *
from student
where name2 = 'b       ';

select * from emp1 order by 1;
insert into emp1 values(1,'fname','lname','email','폰','25/04/23','job',100,0.2,100,20);
insert into emp1 values(2,'fname','lname','email','폰',sysdate,'job',100,0.2,100,20);
insert into emp1 values(3,'fname','lname','email','폰','25/04/23','job',100,0.2,100,'20');


------------------------------------------
-- UPDATE
update emp1
set FIRST_NAME = 'AA', LAST_NAME='BB'
where EMPLOYEE_ID = 3;
rollback;       -- 원상복귀
commit;

-- emp1의 직원번호가 3의 부서와 급여를 수정하고자한다. 100직원의 부서와 같은부서, 급여는 101번직원의 급여와 같다.
select *
from emp1
order by 1;


update emp1
set DEPARTMENT_ID =(select DEPARTMENT_ID from employees where DEPARTMENT_ID = 100),
    salary = (select salary from employees where DEPARTMENT_ID = 101)
where EMPLOYEE_ID = 101;

select * from emp1 where employee_id <100


----------------------------------------------------
-- delete
-- row삭제
delete from emp1;
rollback;

truncate table emp1;        -- DML아님, DDL은 자동 커밋

insert into emp1 
select * from employees;
commit;
select * from emp1


-- lab1 문제 1) 
-- 유저티어
create table GAME_USERS(
    ID varchar2(20),
    DISTANCE number,
    TIME_SPENT number(10,9),
    BEST_DATE date
);

insert into game_users values('gamer2',141900,6.131903793,to_date('2016/11/21 07:00:38', 'YYYY-MM-DD HH24:MI:SS'));
insert into game_users values('ayrmogul500',110000,8.111473256,to_date('2016/11/19 16:17:26', 'YYYY-MM-DD HH24:MI:SS'));
insert into game_users values('abcdef',65000,4.093933119,to_date('2016/12/04 19:45:02', 'YYYY-MM-DD HH24:MI:SS'));
insert into game_users values('hola201',5321,5.694752452,to_date('2016/12/04 04:47:58', 'YYYY-MM-DD HH24:MI:SS'));


select id ID, case
    when distance >= 130000 then 'DIAMOND'
    when distance >= 100000 then 'GOLD'
    when distance >= 50000 then 'SILVER'
    else 'BRONZE'
end TIER
from game_users
order by id desc;


-- lab2 문제 2)
-- 장바구니의 수
create table carts(
    id number,
    user_id number,
    payed_at date,
    product_count number
);

insert into carts values(636,3,to_date('2001-02-23', 'yyyy-mm-dd'), 5);
insert into carts values(287,4,to_date('2000-05-27', 'yyyy-mm-dd'), 13);
insert into carts values(448,4,to_date('2000-08-17', 'yyyy-mm-dd'), 17);
insert into carts values(578,4,to_date('2001-01-29', 'yyyy-mm-dd'), 9);
insert into carts values(734,11,to_date('2001-04-10', 'yyyy-mm-dd'), 10);
insert into carts values(195,11,to_date('2001-04-12', 'yyyy-mm-dd'), 11);

select * from carts

select user_id, count(user_id) "PAYED_COUNT"
from carts
where product_count>=10
group by user_id
having count(user_id) >=2
order by count(user_id), user_id desc;


-----------------------------------------------------
-- 트랜잭션
-- transaction : 하나의 논리적인 작업단위
-- commit : transaction을 종료(지금까지 수행한 DML을 DB에 반영한다.)
-- rollback : 지금까지 수행한 DML을 취소한다.
commit;     

-- tabledl 구조가 복사될때 제약조건은 복사되지 않는다. 단, not null은 제외
select * from emp1
update emp1 set salary = 1000 where employee_id=1;

update emp1 set salary = 1000 where employee_id=198;
delete from emp1 where employee_id=199;
insert into emp1(employee_id, first_name,last_name, email, hire_date, job_id ) values(1,'aa', 'bb', 'zdaf',sysdate, 'IT');
rollback;



-------------------------------------------------------------
-- 테이블 구조 수정
-- alter

create table carts(
    ID NUMBER,
    USERID varchar(20),          -- 타입 수정
    PAYED_AT DATE,          -- 삭제
    product_count2 number   -- 이름 수정
);
select * from carts
desc carts
alter table carts add info2 varchar(100); -- 추가
alter table carts rename column product_count2 to product_count3; -- 컬럼명 수정
-- 데이터 타입 변경, 기존에 number타입, 값이 숫자로 들어있는 상태에서는 varchar2로 변경안됨
ALTER TABLE carts MODIFY USER_ID VARCHAR2(20);      
alter table carts drop column PAYED_AT;     -- 컬럼 삭제

desc employees
