Day06(25.5.16)


1. 문서 객체 모델(DOM)
    webapp > day05 > 1.html
    - 자바스크립트를 이용하여 웹 문서에 접근하고 제어할 수 있도록 객체를 사용해 웹 문서를 체계적으로 정리하는 방법
    - DOM 트리
        - 웹 문서에 있는 요소들 간의 부모, 자식 관계를 계층 구조로 표시한 것
        - 노드 : DOM 트리에서 가지가 갈라져 나간 항목
        - 루트 노드 : DOM 트리의 최상위에 있는 노드

    - DOM 요소에 접근하고 속성 가져오기
        - DOM 요소에 접근하는 방법
            1. getElementById: id 속성을 기준으로 요소를 선택
            let elementById = document.getElementById("myElement");

            2. getElementsByClassName: class 속성을 기준으로 요소를 선택 (HTMLCollection 반환)
            let elementsByClassName = document.getElementsByClassName("myClass");

            3. getElementsByTagName: 태그 이름을 기준으로 요소를 선택 (HTMLCollection 반환)
            let elementsByTagName = document.getElementsByTagName("div");

            4. querySelector: CSS 선택자를 사용하여 첫 번째 요소를 선택
            let elementByQuerySelector = document.querySelector(".myClass");

            5. querySelectorAll: CSS 선택자를 사용하여 모든 요소를 선택 (NodeList 반환)
            let elementsByQuerySelectorAll = document.querySelectorAll(".myClass");

        - DOM 요소의 속성 가져오는 방법
            1. getAttribute: 특정 속성 값을 가져옴
            let attributeValue = elementById.getAttribute("class");

            2. 속성 접근자로 직접 접근
            let idValue = elementById.id; // id 속성 값 가져오기
            let classValue = elementById.className; // class 속성 값 가져오기

            3. dataset: data-* 속성 값을 가져옴
            let dataValue = elementById.dataset.myData; // data-my-data 속성 값 가져오기

    - DOM의 event 객체
            - day02 > jsp > deptinsert.jsp에서 javascript 이벤트 사용
            day05 > extenal1.js > f4, 표준방식으로 이벤트 연결

            - 이벤트가 발생했을 때 브라우저가 생성하는 객체로, 이벤트에 대한 정보를 담고 있음
            - 주요 속성과 메서드
            - type: 이벤트의 종류를 나타내는 문자열
            - target: 이벤트가 발생한 요소를 나타냄
            - preventDefault(): 기본 동작을 막음 (예: 링크 클릭 시 페이지 이동 방지)
            - stopPropagation(): 이벤트 전파를 중단

        - 이벤트 종류와 사용법
            - 클릭 이벤트
            변수명.addEventListener("click", function(event) {
                console.log("Clicked element:", event.target);
            });

            - 키보드 이벤트
            변수명.addEventListener("keydown", function(event) {
                console.log("Key pressed:", event.key);
            });

            - 마우스 이벤트
            변수명.addEventListener("mousemove", function(event) {
                console.log("Mouse position:", event.clientX, event.clientY);
            });

            - 폼 이벤트
            formElement.addEventListener("submit", function(event) {
                event.preventDefault(); // 폼 제출 방지
                console.log("Form submitted");
            });

            - 윈도우 이벤트
            window.addEventListener("resize", function(event) {
                console.log("Window resized");
            });

        - DOM에서 노드 추가, 삭제하기
            day05 > extenal1.js > f5,f6,f7
             1. 노드 추가
                 - appendChild(node): 부모 노드의 마지막 자식으로 지정된 노드를 추가니다.
                 - insertBefore(newNode, referenceNode): 부모 노드에서 참조 노드 앞에 새 노드를 삽입
                 - append(): 여러 노드나 문자열을 부모 노드의 마지막에 추가
                 - prepend(): 여러 노드나 문자열을 부모 노드의 첫 번째 자식으로 추가
             
             2. 노드 삭제
                 - removeChild(node: 부모 노드에서 지정된 자식 노드를 제거)
                 - remove(): 노드를 DOM에서 직접 제거
             
              사용 예시
              - 노드 추가는 새로운 요소를 동적으로 생성하거나 기존 요소를 재배치할 때 사용
              - 노드 삭제는 불필요한 요소를 제거하거나 UI를 업데이트할 때 사용
             
              주의사항
              - appendChild와 insertBefore는 기존 DOM에서 노드를 이동시키는 동작을 수행가능능
              - removeChild를 사용할 때는 제거된 노드가 반환되므로 필요 시 재사용 가능

2. lab
    - javascript에서 해결
    day05 > mission1_question.html
    day05 > mission3_q.html

3. 예외 처리
    - 예외발생시 프로그램은 중지된다.
	- 예외처리를 하면 프로그램은 계속 진행된다.
	try{
		var arr = new Array(aaaaaaaaaaaaaaaaaaaaa);
	}catch(ex){
		console.log("메시지: " + ex.message);
	}finally{
		
	} 

4. jQuery
    day05 > 2jQuery.html
    - 모든 브라우저에서 동작하는 클라이언트 자바스크립트 라이브러리
    - 다운로드받지않고 CDN사용
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    
    $(document).ready() == window.onload
    $()으로 사용

    day05 > 3jQuery.html
    - 기본 선택자
        - 태그 선택자: 특정 태그 이름을 가진 요소를 선택
        $("div") : 모든 <div> 요소 선택

        - ID 선택자: 특정 ID를 가진 요소를 선택
        $("#myId") : ID가 myId인 요소 선택

        - 클래스 선택자: 특정 클래스를 가진 요소를 선택
        $(".myClass") : 클래스가 myClass인 요소 선택

        - 전체 선택자: 모든 요소를 선택
        $("*") : 모든 요소 선택

    - 속성 선택자
        - 특정 속성을 가진 요소를 선택
        $("input[name='username']") : name 속성이 username인 <input> 요소 선택

        - 특정 속성 값이 포함된 요소를 선택
        $("a[href*='example']") : href 속성에 example이 포함된 <a> 요소 선택

        - 특정 속성 값으로 시작하는 요소를 선택
        $("input[type^='text']") : type 속성이 text로 시작하는 <input> 요소 선택

        - 특정 속성 값으로 끝나는 요소를 선택
        $("img[src$='.jpg']") : src 속성이 .jpg로 끝나는 <img> 요소 선택

    - 함수 필터 선택자
        - 첫 번째 요소 선택
        $("li:first") : 첫 번째 <li> 요소 선택

        - 마지막 요소 선택
        $("li:last") : 마지막 <li> 요소 선택

        - 짝수 번째 요소 선택
        $("li:even") : 짝수 번째 <li> 요소 선택 (0부터 시작)

        - 홀수 번째 요소 선택
        $("li:odd") : 홀수 번째 <li> 요소 선택

        - 특정 인덱스의 요소 선택
        $("li:eq(2)") : 세 번째 <li> 요소 선택 (0부터 시작)

    - 배열 관리
        - each(): 배열이나 객체의 각 항목에 대해 반복 작업 수행
        변수명.each(function(index, element) {
            console.log("Index:", index, "Element:", element);
        });

        - map(): 배열의 각 항목을 변환하여 새로운 배열 생성
        let newArray = 변수명.map(function(index, element) {
            return $(element).text();
        }).get();

        - get(): jQuery 객체를 일반 배열로 변환
        let array = 변수명.get();

        - filter(): 조건에 맞는 요소만 선택
        let filtered = 변수명.filter(function(index, element) {
            return $(element).hasClass("active");
        });

    4jQuery.html
    - 문서 객체의 스타일 추가
        - css(): 문서 객체의 스타일을 동적으로 추가하거나 변경
        변수명.css("color", "red"); // 텍스트 색상을 빨간색으로 변경
        변수명.css({
            "background-color": "blue",
            "font-size": "16px"
        }); - 여러 스타일을 한 번에 변경

    - 문서 객체의 내부 추가
        - html(): 문서 객체의 내부 HTML을 설정하거나 가져옴
        변수명.html("<p>새로운 내용</p>"); - 내부 HTML을 설정
        let content = 변수명.html(); - 내부 HTML을 가져옴

        - text(): 문서 객체의 텍스트 내용을 설정하거나 가져옴
        변수명.text("새로운 텍스트"); - 텍스트 내용을 설정
        let textContent = 변수명.text(); - 텍스트 내용을 가져옴

    - 문서 객체 제거
        - remove(): 문서 객체를 DOM에서 제거
        변수명.remove(); - 선택된 요소를 제거

        - empty(): 문서 객체의 자식 요소를 모두 제거
        변수명.empty(); - 선택된 요소의 내부를 비움

    - 문서 객체 삽입
        - append(): 선택된 요소의 마지막 자식으로 삽입
        변수명.append("<p>추가된 내용</p>"); - 마지막에 내용 추가

        - prepend(): 선택된 요소의 첫 번째 자식으로 삽입
        변수명.prepend("<p>추가된 내용</p>"); - 처음에 내용 추가

        - after(): 선택된 요소 바로 뒤에 삽입
        변수명.after("<p>추가된 내용</p>"); - 요소 뒤에 내용 추가

        - before(): 선택된 요소 바로 앞에 삽입
        변수명.before("<p>추가된 내용</p>"); - 요소 앞에 내용 추가
