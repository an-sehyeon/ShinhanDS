Day05(25.5.15)


1. 복습
    - empAll.js파일 생성
        - javascript파일을 따로 관리
        - empAll.jsp파일에서 javascript파일 연결


2. 복습2 & 함수 실습
    - web > day04 > 1.html
      extenal2.js 파일에 자바스크립트 작성후 연결
        - 자바스크립트 함수 test
            1)변수타입 : number, string, boolean, undefined, object(array포함), function
                - undefined : 변수는 선언되었지만 아직 값을 할당하지 않음.
            
            2) 변수선언
                - 선언 없을수 있다.
                - var, let, const(상수)
                    a=10;           전역변수
                    var b = 20;     전역변수
                    let c = 30;     전역변수
                    const d = 40;   전역변수, 상수
                    {
                        var e = 50;	// 전역변수
                        let f = 60; // block내에서만 유효
                    }
                    function f1(){
                        var v1 = 100;	// 지역변수
                        v2 = 200;	// 전역변수
                    }

            3) 선언적 함수, 익명함수
                day04 > extenal2.js > f_1();

            4) 가변 인자 함수  
                - 자바스크립트함수는 이름이 같으면 나중것이 수행된다.
                - 매개변수의 개수를 비교하지 않음에 주의!!
                day04 > extenal2.js > f_2();

            5) 내부 함수
                day04 > extenal2.js > f_3();

            6) 콜백 함수
                - 함수정의를 파라메터로 전달하고 받은쪽에서 호출
                day04 > extenal2.js > f_4();

            7) 클로저
                - 지역변수는 지역을 벗어나면 사라진다 
                - 클로저 : 지역을 벗어나도 지역변수를 사용하고자 한다.
                day04 > extenal2.js > f_5();
                day04 > extenal2.js > f_6();
                day04 > extenal2.js > f_7();        // 아이디 길이 검증

            8) 타이머 함수
                day04 > extenal2.js > f_8();

            9) 인코딩과 디코딩 함수
                day04 > extenal2.js > f_9();

            10) 코드 실행 함수(eval내장함수)
                 day04 > extenal2.js > f_10();


3. 객체(Object)
    - web > day04 > 2.html
      object_test.js 파일에 자바스크립트 작성후 연결

    [Array 객체의 메서드]
    1) 배열연습(concat,join)
        object_test.js > f1();

    2) 배열연습(push,pop)
        object_test.js > f2();

    3) 배열연습(splice,slice)
        - slice()는 원본 유지
        - 기존 배열을 바꾸지 않으면서 삭제하는 메서드
        object_test.js > f3();

    [Date 내장 객체]
    4) Date(날짜,시간) 
        object_test.js > f4();    

    [브라우저 관련 객체]
    BOM : Browser Object Model
    5) BOM(window)
        object_test.js > f5();     
    
    6) BOM(document)
        object_test.js > f6();     
    
    7) BOM(location)
        object_test.js > f7();     
    
    8) BOM(navigator)
        object_test.js > f8();     
        includes()함수 : 문자열에 원하는 문자열이 포함되어 있는지 여부 확인하는 함수

    9) BOM(screen)
        object_test.js > f9();     
    
    10) BOM(history)
        object_test.js > f10();     
    

4. 사용자정의 오브젝트
    object_test.js > f_add() > f_obj1(); 
    object_test.js > f_add() > f_obj2(); 

    - 객체의 속성 추가와 제거
    object_test.js > f_add() > f_obj3(); 

5. 생성자 함수
    - new 키워드로 객체 생성
    - this 키워드 : 생성자 함수로 생성될 객체의 속성 지정
    생성자 함수 Student()를 코딩해서 f_obj4()에서 사용
        - 메모리에 따른 문제 해결
            - 프로토타입
                - 동일한 속성을 공유하는 객체를 생성할 때 메모리 사용을 줄이기 위해 사용
                - 생성자 함수의 prototype 속성을 통해 메서드나 속성을 추가할 수 있음
            
    - 기본자료형과 객체의 메서드
        - 기본형은 속성사용은 가능, 추가 불가
        f_obj5();

    - Array객체 sort()
        - 기본은 문자로 asc sort
        f_obj6();
        f_obj4()에서 성적순으로 sort

    - Array객체 forEach(), map()메서드, filter()메서드, every()메서드
        forEach : 배열의 각 요소에 대해 제공된 함수를 한 번씩 실행
            const arr = [1, 2, 3];
            arr.forEach((num) => console.log(num)); // 1, 2, 3 출력

        map : 배열의 각 요소를 변환하여 새로운 배열을 반환
            const arr = [1, 2, 3];
            const squared = arr.map((num) => num * num);
            console.log(squared); // [1, 4, 9]

        filter : 조건에 맞는 요소들만 포함하는 새로운 배열을 반환
            const arr = [1, 2, 3, 4];
            const even = arr.filter((num) => num % 2 === 0);
            console.log(even); // [2, 4]

        every : 배열의 모든 요소가 조건을 만족하면 true를 반환
            const arr = [2, 4, 6];
            const allEven = arr.every((num) => num % 2 === 0);
            console.log(allEven); // true

        some : 배열의 일부 요소가 조건을 만족하면 true를 반환
            const arr = [1, 2, 3];
            const hasEven = arr.some((num) => num % 2 === 0);
            console.log(hasEven); // true
        - f_obj7();

    - JSON 객체 (JavaScript Object Notation)객체로 만들기(문자열)
        f_obj8
    
    
